{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"main script guard": {
		"prefix": "!main",
		"body": [
			"def main():",
			"    ${0:pass}",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
			"",
		],
	},
	"async main script guard": {
		"prefix": "!amain",
		"body": [
			"async def main():",
			"    ${0:pass}",
			"",
			"if __name__ == \"__main__\":",
			"    asyncio.run(main())",
			"",
		],
	},
	"jupyter autoreload": {
		"prefix": "!autoreload",
		"body": [
			"%load_ext autoreload",
			"%autoreload 2"
		],
	},
	"ipython embed": {
		"prefix": "!embed",
		"body": [
			"from IPython import embed; embed()",
		],
	},
	"pytest parameterize": {
		"prefix": "!pmp",
		"body": [
			"@pytest.mark.parametrize(\"$0\", [(),],)",
		],
	},
	"argument parser": {
		"prefix": "!argparse",
		"body": [
			"parser = ArgumentParser()",
			"parser.add_argument(\"$1\")",
			"args = parser.parse_args()$0",
		],
	},
	"time elapsed": {
		"prefix": "!elapsed",
		"body": [
			"t0 = time.perf_counter()",
			"$0",
			"elapsed = time.perf_counter() - t0",
		],
	},
	"pandas long columns": {
		"prefix": "!pdcolwidth",
		"body": [
			"with pd.option_context(\"display.max_colwidth\", None):",
			"    display($0)",
		],
	},
}