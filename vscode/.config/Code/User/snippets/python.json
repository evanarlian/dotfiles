{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"common imports": {
		"prefix": "!import",
		"body": [
			"from pathlib import Path",
			"import math",
			"import random",
			"",
			"import numpy as np",
			"import pandas as pd",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
			"",
			"import torch",
			"from torch import nn",
			"from torch import optim",
			"import torch.nn.functional as F",
			"",
		],
	},
	"main script guard": {
		"prefix": "!main",
		"body": [
			"def main():",
			"    ${0:pass}",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
			"",
		],
	},
	"jupyter autoreload": {
		"prefix": "!autoreload",
		"body": [
			"%load_ext autoreload",
			"%autoreload 2"
		],
	},
	"ipython embed": {
		"prefix": "!embed",
		"body": [
			"from IPython import embed; embed()",
		],
	},
	"dict to device": {
		"prefix": "!kvdevice",
		"body": [
			"${1:my_dict} = {k: v.to(${2:device}) for k, v in ${1:my_dict}.items()}$0",
		],
	},
	"pytest parameterize": {
		"prefix": "!pmp",
		"body": [
			"@pytest.mark.parametrize(\"$0\", [(),],)",
		],
	},
	"argument parser": {
		"prefix": "!argparse",
		"body": [
			"parser = ArgumentParser()",
			"parser.add_argument(\"$1\")",
			"args = parser.parse_args()$0",
		],
	},
}